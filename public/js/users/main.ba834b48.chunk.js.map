{"version":3,"sources":["reducers/app.reducer.tsx","user-crud-handlers/create.tsx","user-crud-handlers/delete.tsx","user-crud-handlers/update.tsx","user-crud-handlers/read.tsx","components/Alert.tsx","components/User.tsx","components/UserListHeader.tsx","components/UserList.tsx","components/AddUser.tsx","components/EditUser.tsx","components/ViewUser.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["reducer","state","action","type","users","payload","alert","show","message","error","onViewUser","onAddUser","onEditUser","user","onViewuser","currentUsers","push","index","findIndex","id","splice","handleCreateUser","userToCreate","dispatch","a","fetch","method","headers","body","JSON","stringify","response","ok","Error","statusText","json","userCreated","handleDeleteUser","handleUpdateUser","editedUser","handleReadUsers","findOptions","encodeURI","data","usersCount","count","Alert","onClickHandler","color","onClick","remove","User","appContext","useContext","AppContext","code","name","contactFirstName","contactLastName","email","defaultURLSlug","active","className","window","confirm","UserListHeader","UserList","props","userListRows","map","AddUser","initialUserState","contactTitle","address","customURLSlug","dateOfRegistration","Date","Profile","description","properties","bulmaProperties","primaryColor","primaryBackground","useState","setUser","onChange","event","userState","target","value","onSubmit","preventDefault","placeholder","required","EditUser","readOnly","ViewUser","aria-label","React","createContext","App","jwtToken","useReducer","useEffect","myAlert","Provider","Boolean","location","hostname","match","initialData","document","getElementById","getAttribute","initialProps","parse","ReactDOM","hydrate","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.ba834b48.chunk.js","sourcesContent":["import { IState, IAction } from '../app.interfaces';\n\nconst reducer = (state: IState, action: IAction) => {\n    switch (action.type) {\n        case 'FetchDataSuccess':\n            return {\n                ...state, users: action.payload!.users\n            };\n        case 'FetchDataFailure':\n            return {\n                ...state, alert: { show: true, type: \"danger\", message: `Could not load remote data: ${action.payload!.error}` }\n            };\n        case 'HandleViewUser':\n            return {\n                ...state, onViewUser: true, onAddUser: false, onEditUser: false, user: action.payload!.user\n            };\n        case 'HandleCloseViewUser':\n            return{\n                ...state, onViewuser: false, user: null\n            }\n        case 'HandleOnAddUser':\n            return {\n                ...state, onAddUser: true, onEditUser: false, alert: {...state.alert, show: false}\n            };\n        case 'HandleCancelCreate':\n            return {\n                ...state, onAddUser: false\n            };\n        case 'BeforeCreateUser':\n            //goal here is to set alert to show creating User message\n            return {\n                ...state, alert: { show: true, type: \"info\", message: 'Creating user. Please wait!' }\n            };\n        case 'CreateUserSuccess': {\n            //goal here is to update state with User created\n            const currentUsers = state.users!;\n            currentUsers.push(action.payload!.user!);\n            return {\n                ...state, users: currentUsers, onAddUser: false, alert: { show: true, type: \"success\", message: 'User successfully created!' }\n            };\n        };\n        case 'CreateUserFailure':\n            //goal here is to set alert to show failure to create\n            return {\n                ...state, alert: { show: true, type: \"danger\", message: `Could not create user: ${action.payload!.error}` }\n            };\n        case 'BeforeDeleteUser':\n            //goal here is to set alert to show creating User message\n            return { \n                ...state, alert: { show: true, type: \"info\", message: 'Deleting user. Please wait!' } \n            };\n        case 'DeleteUserSuccess': {\n            //goal here is to remove deleted User from state\n            const currentUsers = state.users;\n            //find the index corresponding to the user with the passed id\n            const index = currentUsers!.findIndex((user) => user.id === action.payload!.id);\n            currentUsers!.splice(index, 1);\n            return { \n                ...state, onViewUser: false, users: currentUsers, alert: { show: true, type: \"success\", message: 'User successfully deleted!' } \n            };\n        };\n        case 'DeleteUserFailure':\n            //goal here is to set alert to show failure to delete\n            return { \n                ...state, onViewUser: false, alert: { show: true, type: \"danger\", message: `Could not delete user: ${action.payload!.error}` } \n            };\n        case 'BeforeUpdateUser':\n            //goal here is to set alert to show updating User message\n            return { \n                ...state, alert: { show: true, type: \"info\", message: 'Updating user. Please wait!' } \n            };\n        case 'HandleCancelUpdate':\n            return { \n                ...state, onEditUser: false \n            };\n        case 'HandleEditUser': {\n            //alert(JSON.stringify(action.payload!.User))\n            //goal here is to find the User to be edited and set the User in state to be edited\n            const currentUsers = state.users;\n            \n            const index = currentUsers!.findIndex((user) => user.id === action.payload!.id);\n            const user = currentUsers![index];\n            return { \n                ...state, onEditUser: true, user: user, onAddUser: false, alert: {...state.alert, show: false} \n            };\n        };\n        case 'UpdateUserSuccess': {\n            //goal here is to update state with User updated\n            const currentUsers = state.users;\n            const index = currentUsers!.findIndex((user) => user.id === action.payload!.user!.id);\n            //now change the value for that user in state\n            currentUsers![index] = action.payload!.user!;\n            return { \n                ...state, onViewUser: false, users: currentUsers, user: action.payload!.user!, onEditUser: false, alert: { show: true, type: \"success\", message: 'User successfully updated!' } \n            };\n        };\n        case 'UpdateUserFailure':\n            //goal here is to set alert to show failure to update\n            return { \n                ...state, onViewUser: false, alert: { show: true, type: \"danger\", message: `Could not update user: ${action.payload!.error}` } \n            };\n        case 'HandleCloseAlert':\n            return { \n                ...state, alert: { show: false, message: '', type: '' } \n            };\n            \n        default:\n            return state; //return state as is if the action type indicated is not handled\n    }//close switch statement\n\n}\nexport default reducer;","import { IAction, IUser } from \"../app.interfaces\";\n\n//function that handles Create User\nexport const handleCreateUser = async (userToCreate: IUser, dispatch: React.Dispatch<IAction>) => {\n    //dispatch to state reducer, specifying the action type. Just a message that says 'Creating user ...'\n    dispatch({ type: 'BeforeCreateUser' });\n    //let's try to write to backend\n    try {\n        //I have left a number of init options commented out rather than not have then at, so you can know about them\n        //see https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch for info on these options\n        const response = await fetch('/users',\n            {\n                method: 'POST',\n                //mode: 'cors', // no-cors, *cors, same-origin\n                //cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n                //credentials: 'same-origin', // include, *same-origin, omit\n                headers: {\n                    'Content-Type': 'application/json'\n                    // 'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                //redirect: 'follow', // manual, *follow, error\n                //referrerPolicy: 'no-referrer', // no-referrer, *client\n                body: JSON.stringify(userToCreate) // body data type must match \"Content-Type\" header\n\n            });\n        if (!response.ok) throw new Error(response.statusText);//confirm that response is OK, else throw error\n        //Response is ok. Proceed!\n        const userCreated: IUser = await response.json();\n\n        //useReducer to dispatch successful user creation, sending userCreated as payload.\n        dispatch({ type: 'CreateUserSuccess', payload: { user: userCreated } });\n    } catch (error) {\n        //dispatch error to state for display\n        dispatch({ type: 'CreateUserFailure', payload: { error: error } });\n    }\n}","import { IAction } from \"../app.interfaces\";\n\nexport const handleDeleteUser = async (id: number | string, dispatch: React.Dispatch<IAction>) => {\n    //You can optionally send an alert at the beginning of this function, in case it takes long to finish.\n    dispatch({ type: 'BeforeDeleteUser' });\n    try {\n        const response = await fetch(`/users/${id}`, //note this URL\n            {\n                method: 'DELETE',\n                //mode: 'cors', // no-cors, *cors, same-origin\n                //cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n                //credentials: 'same-origin', // include, *same-origin, omit\n                //redirect: 'follow', // manual, *follow, error\n                //referrerPolicy: 'no-referrer', // no-referrer, *client\n            });\n        if (!response.ok) throw new Error(response.statusText);//confirm that response is OK\n        //Response is ok. Proceed!\n        //remove user from state\n        dispatch({ type: 'DeleteUserSuccess', payload: { id: id } })\n    } catch (error) {\n        //problem deleting from backend\n        dispatch({ type: 'DeleteUserFailure', payload: { error: error } })\n    }\n}","import { IAction, IUser } from \"../app.interfaces\";\n\n\nexport const handleUpdateUser = async (editedUser: IUser, dispatch: React.Dispatch<IAction>) => {\n    //You can optionally send an alert at the beginning of this function, in case it takes long to finish.\n    //Of course, this alert will only flash if it takes very minimal time to create item\n    dispatch({ type: 'BeforeUpdateUser' })\n    //let's try to write to backend\n    try {\n        const response = await fetch(`/users/${editedUser.id}`,\n            {\n                method: 'PUT',//notice the method\n                //mode: 'cors', // no-cors, *cors, same-origin\n                //cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n                //credentials: 'same-origin', // include, *same-origin, omit\n                headers: {\n                    'Content-Type': 'application/json'\n                    // 'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                //redirect: 'follow', // manual, *follow, error\n                //referrerPolicy: 'no-referrer', // no-referrer, *client\n                body: JSON.stringify(editedUser) // body data type must match \"Content-Type\" header\n\n            });\n        if (!response.ok) throw new Error(response.statusText);//confirm that response is OK\n        //Response is ok. Proceed with setting state with itemUpdated\n        //partial update does not return full object, hence I am not using below to get user updated\n        //const userUpdated = await response.json();\n        await response.json();\n        //dispatch to state\n        dispatch({ type: 'UpdateUserSuccess', payload: { user: editedUser } })\n    } catch (error) {\n        dispatch({ type: 'UpdateUserFailure', payload: { error: error } })\n    }\n\n}","import { IAction, IFindOptions } from \"../app.interfaces\";\n\n//function to fetch data\n//See https://github.com/typeorm/typeorm/blob/master/docs/find-options.md for find options\n//findOptions defaults to empty {}\nexport const handleReadUsers = async (dispatch: React.Dispatch<IAction>, findOptions: IFindOptions = {}) => {\n    try {\n      //Rather than use absolute URL, we are using relative below because we have made a proxy entry into package.json\n      //i.e. \"proxy\": \"http://localhost:3003\". In this way, our code is more like how it will be at production deployment\n      //when we serve both the client react application and the backend from the same domain.\n      const response = await fetch(`/users?findOptions=${encodeURI(JSON.stringify(findOptions))}`);\n      \n      if (!response.ok) throw new Error(response.statusText);\n\n      const data = await response.json();\n      \n      //set in state  \n      dispatch({type: 'FetchDataSuccess', payload: {usersCount: data.count, users: data.users}})\n    } catch (error) {\n      //set state\n      //alert(error)\n      dispatch({type: 'FetchDataFailure', payload: {error: error}})\n    }\n  };\n\n","import React from 'react';\nimport { Notification, Button } from 'react-bulma-components';\n\ntype Props = {\n    message: string,\n    type: \"info\" | \"success\" | \"link\" | \"primary\" | \"warning\" | \"danger\" | \"light\" | \"dark\" | \"white\" | \"black\" | undefined,\n    onClickHandler: ()=>void\n    \n}\n\nconst Alert: React.FC<Props> = ({message, type, onClickHandler}) => {\n    //For bulma notification documentation see https://bulma.io/documentation/elements/notification/\n    return(\n        <Notification color={type} onClick={onClickHandler}>\n          {message}\n            <Button remove />\n        </Notification>\n    )\n}\n\nexport default Alert","/** This component is for displaying each item in the record, passed to it from UserList */\nimport React, { useContext } from 'react';\nimport { IUser } from '../app.interfaces';\nimport { AppContext } from '../App';\n\ntype Props = {\n    user: IUser,\n}\n\nconst User: React.FC<Props> = ({user}) => {\n\n    //declare applicable contexts\n    const appContext = useContext(AppContext);\n\n    //callback function for delete button onClick event. We could have also embedded this function definition directly rather than define it first here\n    const onDeleteUser = () => {\n        appContext!.handleDeleteUser!(user.id, appContext!.dispatch); ////notice here that we are invoking the handleDeleteUser() via appContext. The exclamation mark is because of the possible null which will not really happen\n    };\n\n    //callback function for edit button\n    const onEditUser = () => {\n        //appContext!.handleEditUser!(user.id, appContext!.dispatch); //notice here that we are invoking the handleEditUser() via appContext. The exclamation mark is because of the possible null which will not really happen\n        appContext!.dispatch({ type: 'HandleEditUser', payload: {id: user.id} });\n    };\n\n    const onViewUser = () => {\n        appContext!.dispatch({type: 'HandleViewUser', payload: {user}})\n    }\n\n    return (\n        <tr>\n            <td>{user.code}</td>\n            <td>{user.name}</td>\n            <td>{user.contactFirstName}</td>\n            <td>{user.contactLastName}</td>\n            <td>{user.email}</td>\n            <td>{user.defaultURLSlug}</td>\n            <td>{user.active}</td>\n            <td>\n                \n                <div className=\"buttons are-small\">\n                    <button className=\"button is-link\" onClick={onViewUser}>View Detail</button>\n                    <button className=\"button is-warning\" onClick={onEditUser}>Edit</button>\n                    <button className=\"button is-danger\" onClick={() => { if (window.confirm('This action cannot be reversed! Are you sure you want to delete?')) onDeleteUser() }}>Delete</button>\n                </div>\n                \n            </td>\n            \n        </tr>\n    );\n}\n\nexport default User;","/** Table header. We are separating this from UserList just in case it has to carry out\n * some specific tasks like firing sort event based on the header column clicked.\n*/\nimport React from 'react';\n\n\nconst UserListHeader: React.FC = () => {\n\n  return (\n    <thead>\n      <tr>\n          <th>Code</th>\n          <th>Name</th>\n          <th>Contact First Name</th>\n          <th>Contact Last Name</th>\n          <th>Email</th>\n          <th>Default URL Slug</th>\n          <th>Active</th>\n          <th>Action</th>\n      </tr>\n    </thead>\n  );\n}\n\nexport default UserListHeader;","import React from 'react';\nimport { IUser } from '../app.interfaces';\nimport User from './User';\nimport UserListHeader from './UserListHeader';\n\n\n//declare type for Props passed to this \ntype Props = {\n    users: IUser[],\n}\n\nconst UserList: React.FC<Props> = (props) => {\n\n    //prepare users for display in a table\n    let userListRows = null;\n    userListRows = props.users.map((user) => {\n        return <User user={user} />\n    })\n\n    return (\n        <div className=\"table is-striped is-narrow is-hoverable\" >\n            <caption><h3>Available users</h3></caption>\n            <UserListHeader />\n            <tbody>\n                {userListRows}\n            </tbody>\n        </div>\n    );\n}\n\nexport default UserList;","/** This component is for displaying each user in the record, passed to it from UserList */\nimport React, { useState } from 'react';\nimport { IAction, IUser } from '../app.interfaces';\n\n//create the type for the anticipated props to be passed from parent component\ntype Props = {\n    handleCreateUser: Function,\n    dispatch: React.Dispatch<IAction>\n}\n\nconst AddUser: React.FC<Props> = (props) => {\n\n    const initialUserState: IUser = {\n        code: '',\n        name: '',\n        contactFirstName: '',\n        contactLastName: '',\n        contactTitle: '',\n        address: '',\n        email: '',\n        defaultURLSlug: '',\n        customURLSlug: '',\n        dateOfRegistration: new Date(),\n        active: false,\n        Profile: {\n            name: '',\n            description: '',\n            properties: '',\n            bulmaProperties: {\n                primaryColor: '',\n                primaryBackground: ''\n            }\n        }\n    }\n\n    //declare the state variable for User to be added from form. Notice that we are using an object containing the individual elements\n    //We need to interact with them individually as state variable that will change in response to input onChange \n    const [user, setUser] = useState<IUser>({ ...initialUserState });\n\n    //create a general onChange event handler for form inputs that fire onChange event\n    //See https://reactjs.org/docs/events.html? for all kinds of events that can be handled in react\n    const onChange = (event: React.FormEvent) => {\n        const userState = user;//check out user in state as is\n        //modify element in the state which has the same name as the input that fired this event. Pass the new value\n        const target: HTMLInputElement | HTMLSelectElement = event.target as HTMLInputElement | HTMLSelectElement; //as is used here to cast\n        userState[target.name] = target.value;\n        setUser({ ...userState });//checkin the modified state\n    }\n\n    //function to handle form onSubmit event\n    const onSubmit = (event: React.FormEvent) => {\n        event.preventDefault();//do not do the default form submit to the server\n        props.handleCreateUser(user, props.dispatch);//call the handleAddUser function passed via props.\n    }\n\n    //function to handle form onCancel\n    const onCancel = () => {\n        //dispatch to state\n        props.dispatch({ type: 'HandleCancelCreate' })\n    }\n\n    //Note where the above functions are used below within the return statement\n    return (\n        <div className=\"columns is-mobile\">\n            <div className=\"column is-two-thirds\">\n                <div className=\"box\">\n                    <form onSubmit={onSubmit}>\n                        <legend>Add User:</legend>\n                        <div className=\"field\">\n                            <label className=\"label\">Code</label>\n                            <div className=\"control\">\n                                <input className=\"input\" type=\"text\" placeholder=\"Code input\" name=\"code\" value={user.code} onChange={onChange} required/>\n                            </div>\n                        </div>\n                        <div className=\"field\">\n                            <label className=\"label\">Name</label>\n                            <div className=\"control\">\n                                <input className=\"input\" type=\"text\" placeholder=\"Name input\" name=\"name\" value={user.name} onChange={onChange} required/>\n                            </div>\n                        </div>\n                        <div className=\"field\">\n                            <label className=\"label\">Address</label>\n                            <div className=\"control\">\n                                <input className=\"input\" type=\"text\" placeholder=\"Address input\" name=\"address\" value={user.address} onChange={onChange} required/>\n                            </div>\n                        </div>\n                        <div className=\"field\">\n                            <label className=\"label\">Contact First Name</label>\n                            <div className=\"control\">\n                                <input className=\"input\" type=\"text\" placeholder=\"Contact first name input\" name=\"contactFirstName\" value={user.contactFirstName} onChange={onChange} required/>\n                            </div>\n                        </div>\n                        <div className=\"field\">\n                            <label className=\"label\">Contact Last Name</label>\n                            <div className=\"control\">\n                                <input className=\"input\" type=\"text\" placeholder=\"Contact last name input\" name=\"contactLastName\" value={user.contactLastName} onChange={onChange} required/>\n                            </div>\n                        </div>\n                        <div className=\"field\">\n                            <label className=\"label\">Contact title</label>\n                            <div className=\"control\">\n                                <input className=\"input\" type=\"text\" placeholder=\"Contact title input\" name=\"contactTitle\" value={user.contactTitle} onChange={onChange} required/>\n                            </div>\n                        </div>\n                        <div className=\"field\">\n                            <label className=\"label\">Contact email</label>\n                            <div className=\"control\">\n                                <input className=\"input\" type=\"email\" placeholder=\"Contact email input\" name=\"email\" value={user.email} onChange={onChange} required/>\n                            </div>\n                            <p className=\"help is-info\">Enter a valid email here</p>\n                        </div>\n                        <div className=\"field\">\n                            <label className=\"label\">Default URL Slug</label>\n                            <div className=\"control\">\n                                <input className=\"input\" type=\"text\" placeholder=\"Default URL Slug input\" name=\"defaultURLSlug\" value={user.defaultURLSlug} onChange={onChange} required/>\n                            </div>\n                        </div>\n                        <div className=\"field is-grouped\">\n                            <div className=\"control\">\n                                <button className=\"button is-link\">Submit</button>\n                            </div>\n                            <div className=\"control\">\n                                <button className=\"button is-link is-light\" onClick={onCancel}>Cancel</button>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n\n    );\n}\n\nexport default AddUser;","/** This component is for displaying each User in the record, passed to it from UserList */\nimport React, { useState } from 'react';\nimport { IAction, IUser } from '../app.interfaces';\n\n//create the type for the anticipated props to be passed from parent component\ntype Props = {\n    user: IUser,\n    handleUpdateUser: Function,\n    dispatch: React.Dispatch<IAction>\n}\n\nconst EditUser: React.FC<Props> = (props) => {\n\n    const initialUserState: IUser = {\n        id: props.user.id,\n        code: props.user.code,\n        name: props.user.name,\n        contactFirstName: props.user.contactFirstName,\n        contactLastName: props.user.contactLastName,\n        contactTitle: props.user.contactTitle,\n        address: props.user.address,\n        email: props.user.email,\n        defaultURLSlug: props.user.defaultURLSlug,\n        customURLSlug: props.user.customURLSlug,\n        dateOfRegistration: props.user.dateOfRegistration,\n        active: props.user.active,\n        /*\n        customTheme: {\n            name: props.user.customTheme!.name,\n            description: props.user.customTheme!.description,\n            properties: props.user.customTheme!.properties,\n            bulmaProperties: {\n                primaryColor: props.user.customTheme!.bulmaProperties!.primaryColor,\n                primaryBackground: props.user.customTheme!.bulmaProperties!.primaryBackground\n            }\n        }\n        */\n    }\n\n    //declare the state variable for user to be added from form. Notice that we are using an object containing the individual elements\n    //We need to interact with them individually as state variable that will change in response to input onChange \n    const [user, setUser] = useState<IUser>({ ...initialUserState });\n\n    //create a general onChange event handler for form inputs that fire onChange event\n    //See https://reactjs.org/docs/events.html? for all kinds of events that can be handled in react\n    const onChange = (event: React.FormEvent) => {\n        const userState = user;//check out user in state as is\n        //modify element in the state which has the same name as the input that fired this event. Pass the new value\n        const target: HTMLInputElement | HTMLSelectElement = event.target as HTMLInputElement | HTMLSelectElement; //as is used here to cast\n        userState[target.name] = target.value;\n        setUser({ ...userState });//checkin the modified state\n    }\n\n    //function to handle form onSubmit event\n    const onSubmit = (event: React.FormEvent) => {\n        event.preventDefault();//do not do the default form submit to the server\n        props.handleUpdateUser(user, props.dispatch);//call the handleAddUser function passed via props.\n    }\n\n    //function to handle form onCancel\n    const onCancel = () => {\n        //props.handleCancelUpdate(props.dispatch);//call the function handleCancelAdd passed via props\n        //simply set state to make displayUpdate disappear\n        props.dispatch({ type: 'HandleCancelUpdate' });\n    }\n\n    //Note where the above functions are used below within the return statement\n    return (\n        <div className=\"columns is-mobile\">\n            <div className=\"column is-two-thirds\">\n                <div className=\"box\">\n                    <form onSubmit={onSubmit}>\n                        <legend>Add User:</legend>\n                        <input type=\"hidden\" name=\"id\" value={user.id} readOnly/>\n                        <div className=\"field\">\n                            <label className=\"label\">Code</label>\n                            <div className=\"control\">\n                                <input className=\"input\" type=\"text\" placeholder=\"Code input\" name=\"code\" value={user.code} onChange={onChange} required/>\n                            </div>\n                        </div>\n                        <div className=\"field\">\n                            <label className=\"label\">Name</label>\n                            <div className=\"control\">\n                                <input className=\"input\" type=\"text\" placeholder=\"Name input\" name=\"name\" value={user.name} onChange={onChange} required/>\n                            </div>\n                        </div>\n                        <div className=\"field\">\n                            <label className=\"label\">Address</label>\n                            <div className=\"control\">\n                                <input className=\"input\" type=\"text\" placeholder=\"Address input\" name=\"address\" value={user.address} onChange={onChange} required/>\n                            </div>\n                        </div>\n                        <div className=\"field\">\n                            <label className=\"label\">Contact First Name</label>\n                            <div className=\"control\">\n                                <input className=\"input\" type=\"text\" placeholder=\"Contact first name input\" name=\"contactFirstName\" value={user.contactFirstName} onChange={onChange} required/>\n                            </div>\n                        </div>\n                        <div className=\"field\">\n                            <label className=\"label\">Contact Last Name</label>\n                            <div className=\"control\">\n                                <input className=\"input\" type=\"text\" placeholder=\"Contact last name input\" name=\"contactLastName\" value={user.contactLastName} onChange={onChange} required/>\n                            </div>\n                        </div>\n                        <div className=\"field\">\n                            <label className=\"label\">Contact title</label>\n                            <div className=\"control\">\n                                <input className=\"input\" type=\"text\" placeholder=\"Contact title input\" name=\"contactTitle\" value={user.contactTitle} onChange={onChange} required/>\n                            </div>\n                        </div>\n                        <div className=\"field\">\n                            <label className=\"label\">Contact email</label>\n                            <div className=\"control\">\n                                <input className=\"input\" type=\"email\" placeholder=\"Contact email input\" name=\"email\" value={user.email} onChange={onChange} required/>\n                            </div>\n                            <p className=\"help is-info\">Enter a valid email here</p>\n                        </div>\n                        <div className=\"field\">\n                            <label className=\"label\">Default URL Slug</label>\n                            <div className=\"control\">\n                                <input className=\"input\" type=\"text\" placeholder=\"Default URL Slug input\" name=\"defaultURLSlug\" value={user.defaultURLSlug} onChange={onChange} required/>\n                            </div>\n                        </div>\n                        <div className=\"field is-grouped\">\n                            <div className=\"control\">\n                                <button className=\"button is-link\">Submit</button>\n                            </div>\n                            <div className=\"control\">\n                                <button className=\"button is-link is-light\" onClick={onCancel}>Cancel</button>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n\n    );\n}\n\nexport default EditUser;","/** This component is for displaying each item in the record, passed to it from UserList */\nimport React, { useContext } from 'react';\nimport { IUser } from '../app.interfaces';\nimport { AppContext } from '../App';\n\ntype Props = {\n    user: IUser,\n}\n\nconst ViewUser: React.FC<Props> = ({ user }) => {\n\n    //declare applicable contexts\n    const appContext = useContext(AppContext);\n\n    //callback function for delete button onClick event. We could have also embedded this function definition directly rather than define it first here\n    const onDeleteUser = () => {\n        appContext!.handleDeleteUser!(user.id, appContext!.dispatch); ////notice here that we are invoking the handleDeleteUser() via appContext. The exclamation mark is because of the possible null which will not really happen\n    };\n\n    //callback function for edit button\n    const onEditUser = () => {\n        //appContext!.handleEditUser!(user.id, appContext!.dispatch); //notice here that we are invoking the handleEditUser() via appContext. The exclamation mark is because of the possible null which will not really happen\n        appContext!.dispatch({ type: 'HandleEditUser', payload: { id: user.id } });\n    };\n\n    const onClickCloseButton = () => {\n        appContext!.dispatch({type: 'HandleCloseViewUser'})\n    }\n\n    return (\n        <div className=\"modal is-active\">\n            <div className=\"modal-background\"></div>\n            <div className=\"modal-card\">\n                <header className=\"modal-card-head\">\n                    <p className=\"modal-card-title\">{`Details of ${user.name}`}</p>\n                    <button className=\"delete\" aria-label=\"close\" onClick={onClickCloseButton}/>\n                </header>\n                <section className=\"modal-card-body\">\n                    {/*<!-- Content ... -->*/}\n                    <div className=\"columns\">\n                        <div className=\"column is-two-fifths\">\n                            Code:\n                        </div>\n                        <div className=\"column\">\n                            {user.code}\n                        </div>\n                    </div>\n                    <div className=\"columns\">\n                        <div className=\"column is-two-fifths\">\n                            Name:\n                        </div>\n                        <div className=\"column\">\n                            {user.name}\n                        </div>\n                    </div>\n                    <div className=\"columns\">\n                        <div className=\"column is-two-fifths\">\n                            Contact firstname:\n                        </div>\n                        <div className=\"column\">\n                            {user.contactFirstName}\n                        </div>\n                    </div>\n                    <div className=\"columns\">\n                        <div className=\"column is-two-fifths\">\n                            Contact lastname:\n                        </div>\n                        <div className=\"column\">\n                            {user.contactLastName}\n                        </div>\n                    </div>\n                    <div className=\"columns\">\n                        <div className=\"column is-two-fifths\">\n                            Email:\n                        </div>\n                        <div className=\"column\">\n                            {user.email}\n                        </div>\n                    </div>\n                    <div className=\"columns\">\n                        <div className=\"column is-two-fifths\">\n                            Default URL Slug:\n                        </div>\n                        <div className=\"column\">\n                            {user.defaultURLSlug}\n                        </div>\n                    </div>\n                    <div className=\"columns\">\n                        <div className=\"column is-two-fifths\">\n                            Active:\n                        </div>\n                        <div className=\"column\">\n                            {user.active? \"Yes\" : \"No\"}\n                        </div>\n                    </div>\n                </section>\n                <footer className=\"modal-card-foot\">\n                    <div className=\"buttons are-small\">\n                        <button className=\"button is-warning\" onClick={onEditUser}>Edit</button>\n                        <button className=\"button is-danger\" onClick={() => { if (window.confirm('This action cannot be reversed! Are you sure you want to delete?')) onDeleteUser() }}>Delete</button>\n                    </div>\n                </footer>\n            </div>\n        </div>\n\n    );\n}\n\nexport default ViewUser;","import React, { useEffect, useReducer } from 'react';\nimport { IAction, IFindOptions, IState } from './app.interfaces';\nimport reducer from './reducers/app.reducer';\n\nimport { handleCreateUser } from './user-crud-handlers/create';\nimport { handleDeleteUser } from './user-crud-handlers/delete';\nimport { handleUpdateUser } from './user-crud-handlers/update';\nimport { handleReadUsers } from './user-crud-handlers/read';\nimport Alert from './components/Alert';\nimport UserList from './components/UserList';\n\nimport AddUser from './components/AddUser';\nimport EditUser from './components/EditUser';\nimport ViewUser from './components/ViewUser';\n\n/**\n * Here, we take for granted that on initialization, \n * jwt token string may be sent by the server, if there is valid login\n * To get the userinfo and roles from the token, \n * we can use https://github.com/auth0/jwt-decode\n */\ntype Props = {\n  jwtToken?: string\n}\n\n/*Below is type definition for our context type.*/\n//Restricts Context type to null or Object containing functions; null is used only for initialization of context in App.\n//Using Object because we have two or more parameters to pass and we want to carry them together within one context instead of two\n//different ones.\ntype AppContextType = null | { dispatch: React.Dispatch<IAction>, handleDeleteUser: Function };\n\n//create a context to be used to pass handlers like delete, edit handlers to subcomponents.\n//We are also going to pass dispatch returned by useReducer.\nexport const AppContext = React.createContext<AppContextType>(null);\n\n/*Let us define type for our reducer so that we can easily pass any type of previous state and action.\nReducer is simply a type of function that takes previous state and action and returns a new state as represented\nWe don't have to do this. But it is good to know.*/\ntype Reducer<S, A> = (prevState: S, action: A) => S;\n\nconst App: React.FC<Props> = ({ jwtToken }) => {\n\n  /*let us organize state, using useReducer*/\n  //Prepare initial state values\n  const initialState: IState =\n  {\n    users: [],\n    user: null,\n    onAddUser: false,\n    onViewUser: false,\n    onEditUser: false,\n    alert: { show: false, message: '', type: '' }\n  };\n\n  //using useReducer instead of useState\n  const [state, dispatch] = useReducer<Reducer<IState, IAction>>(reducer, initialState);\n\n  /*Additional handler functions here*/\n  //Below is called by Alert component.\n  const handleCloseAlert = () => {\n    dispatch({ type: 'HandleCloseAlert' });\n  }\n\n\n  //Just testing findOptions. Can be used to qualify find.\n  //let findOptions: IFindOptions = {\"select\":[\"id\",\"name\", \"contactFirstName\",\"dateCreated\"], \"order\": {\"name\": \"ASC\", \"id\": \"DESC\"}}\n  let findOptions: IFindOptions = {}\n  /**\n   * useEffect to be run once, hence the second parameter []. Loads data at componentDidMount life cycle stage\n   */\n  useEffect(() => {\n    handleReadUsers(dispatch, findOptions);\n    // eslint-disable-next-line\n  }, []);\n\n  /*Time to logically decide what to show.*/\n  //Setup alert component as a variable so we don't keep repeating\n  const myAlert = (\n    <Alert type={state.alert.type} message={state.alert.message} onClickHandler={handleCloseAlert} />\n  )\n\n  //check if editUser should be loaded or not since it is conditional loading\n  if (state.onEditUser && state.user !== null) {\n    return (\n      <div className=\"container \">\n        <div className=\"content is-medium\">\n          <p>\n            <EditUser user={state.user!} handleUpdateUser={handleUpdateUser} dispatch={dispatch} />\n          </p>\n          <p>\n            {state.alert.show && myAlert}\n          </p>\n          <p>\n            <AppContext.Provider value={{ dispatch, handleDeleteUser }}>\n              <UserList users={state.users!} />\n            </AppContext.Provider>\n          </p>\n        </div>\n      </div>\n    );\n  } else if (state.onAddUser) {//Display AddUser along with UserList if onAddUser is true\n    return (\n      <div className=\"container \">\n        <div className=\"content is-medium\">\n          <p>\n            <AddUser handleCreateUser={handleCreateUser} dispatch={dispatch} />\n          </p>\n          <p>\n            {state.alert.show && myAlert}\n          </p>\n          <p>\n            <AppContext.Provider value={{ dispatch, handleDeleteUser }}>\n              <UserList users={state.users!} />\n            </AppContext.Provider>\n          </p>\n        </div>\n      </div>\n    );\n  } else if (state.onViewUser && state.user != null) {\n    return (\n      <div className=\"container \">\n        <div className=\"content is-medium\">\n          <p>\n            <AppContext.Provider value={{dispatch, handleDeleteUser }}>\n              <ViewUser user={state.user!} />\n            </AppContext.Provider>\n          </p>\n        </div>\n      </div>\n    );\n  } else {//onAddUser is false\n    return (\n      <div className=\"container \">\n        <div className=\"content is-medium\">\n          <p>\n            <button className=\"button is-outline\" onClick={() => { dispatch({ type: 'HandleOnAddUser' }) }}>+ Add User</button>\n          </p>\n          <p>\n            {state.alert.show && myAlert}\n          </p>\n          <p>\n            <AppContext.Provider value={{ dispatch, handleDeleteUser }}>\n              <UserList users={state.users!} />\n            </AppContext.Provider>\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n/* For server side rendering support, we need to use hydrate.\nWe will also get the json data that was written to our server-side template for use here\nOf course, this assumes that we have linked the built js clients to the server side template\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n*/\n\nconst initialData = document.getElementById('initial-props')!.getAttribute('data-json')!;\n\nconst initialProps: {} = JSON.parse(initialData? initialData: '');//parse initial data or empty string\n\nReactDOM.hydrate(<App {...initialProps}/>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}